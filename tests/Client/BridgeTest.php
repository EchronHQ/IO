<?php

declare(strict_types=1);
require_once 'AbstractTest.php';

class BridgeTest extends AbstractTest
{
    public function testPushFromMasterToSlave()
    {

        /** @var \Echron\IO\Client\Bridge $bridge */
        $bridge = $this->getClient();

        $localTestFile1 = tempnam(sys_get_temp_dir(), 'io_test');
        $localTestFileContent1 = 'ThisIsATestFile' . uniqid();

        file_put_contents($localTestFile1, $localTestFileContent1);

        $fileStat = $bridge->getMaster()
                           ->getLocalFileStat($localTestFile1);

        $remoteTestLocation = 'master/test';
        $bridge->getMaster()
               ->push($localTestFile1, $remoteTestLocation);

        $client2remoteTestLocation = 'slave/test';

        $bridge->push($remoteTestLocation, $client2remoteTestLocation);

        $this->assertExistsOnRemoteAndEquals($bridge->getSlave(), $client2remoteTestLocation, $fileStat, $localTestFileContent1);

    }

    protected function getClient(): \Echron\IO\Client\Base
    {
        $master = new \Echron\IO\Client\Memory();
        $slave = new \Echron\IO\Client\Memory();

        return new \Echron\IO\Client\Bridge($master, $slave);
    }

    protected function getRemoteTestFilePath(): string
    {
        return uniqid();
    }

    protected function getRemoteTestFileContent(): string
    {
        // TODO: Implement getRemoteTestFileContent() method.
    }

    public function testPushFile()
    {
        // TODO: Change the autogenerated stub
    }

    public function testPull()
    {
        // TODO: Change the autogenerated stub
    }

    public function testFileExist_Exists()
    {
        // TODO: Change the autogenerated stub
    }

    public function testFileExist_DoesNotExists()
    {
        // TODO: Change the autogenerated stub
    }

    public function testDelete_Existing()
    {
        // TODO: Change the autogenerated stub
    }

    public function testPullFromSlaveToMaster()
    {

        /** @var \Echron\IO\Client\Bridge $bridge */
        $bridge = $this->getClient();

        $localTestFile1 = tempnam(sys_get_temp_dir(), 'io_test');
        $localTestFileContent1 = 'ThisIsATestFile' . uniqid();

        file_put_contents($localTestFile1, $localTestFileContent1);

        $fileStat = $bridge->getMaster()
                           ->getLocalFileStat($localTestFile1);

        $remoteTestLocation = 'master/test';
        $bridge->getSlave()
               ->push($localTestFile1, $remoteTestLocation);

        $client2remoteTestLocation = 'slave/test';

        $bridge->pull($remoteTestLocation, $client2remoteTestLocation);

        $this->assertExistsOnRemoteAndEquals($bridge->getMaster(), $client2remoteTestLocation, $fileStat, $localTestFileContent1);

    }
}
